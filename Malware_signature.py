import hashlib
import psutil

# Path to the malware hashes file
MALWARE_DB_PATH = 'Malware_Hashes.txt'  # Adjust this path as needed

# List of suspicious process names (case-insensitive)
SUSPICIOUS_PROCESS_NAMES = {
    'malware.exe', 'ransomware.exe', 'trojan.exe', 'virus.exe', 'spyware.exe',
    'keylogger.exe', 'backdoor.exe', 'worm.exe', 'adware.exe', 'rootkit.exe', "wannacry.exe", "locky.exe", "cryptolocker.exe", "teslacrypt.exe", "gandcrab.exe", "ryuk.exe",
    "njrat.exe", "darkcomet.exe", "remcos.exe", "backdoor.exe", "bifrost.exe", "subseven.exe", "poisonivy.exe",
    "winlogon86.exe", "mictray.exe", "svchosts.exe", "logkey.exe", "kl.exe", "keyhook.exe", "stealthkey.exe",
    "babylon.exe", "conduit.exe", "adware.exe", "delta.exe", "websearch.exe", "crossbrowse.exe",
    "conficker.exe", "autorun.exe", "netsky.exe", "sobig.exe", "mydoom.exe", "bagle.exe",
    "defender.exe", "security_tool.exe", "avscan.exe", "winwebsec.exe", "roguesecurity.exe",
    "xmrig.exe", "cryptominer.exe", "coinminer.exe", "minerd.exe", "system64.exe", "cpuusage.exe",
    "hackerdefender.exe", "fu.exe", "avenger.exe", "rootkit.exe", "reboot.exe"
}

# List of executable file extensions
EXECUTABLE_EXTENSIONS = {'.exe', '.bat', '.dll', '.com', '.cmd', '.msi', '.scr'}

def generate_file_hash(file_path):
    """Generate a SHA256 hash for a file."""
    hasher = hashlib.sha256()
    with open(file_path, 'rb') as file:
        while chunk := file.read(8192):
            hasher.update(chunk)
    return hasher.hexdigest()

def load_malware_hashes(malware_db_path):
    """Load a list of malicious hashes from a .txt file, ignoring comments and blank lines."""
    malware_hashes = set()
    with open(malware_db_path, 'r') as file:
        for line in file:
            stripped_line = line.strip()
            if stripped_line and not stripped_line.startswith("#") and len(stripped_line) == 64:
                malware_hashes.add(stripped_line)
    return malware_hashes

def is_malicious(file_hash, malware_hashes):
    """Check if a file hash is in the malware database."""
    return file_hash in malware_hashes

def is_executable(file_path):
    """Check if a file has an executable extension."""
    return any(file_path.lower().endswith(ext) for ext in EXECUTABLE_EXTENSIONS)

def get_running_processes():
    """Get a list of all running processes."""
    processes = []
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            processes.append((proc.info['pid'], proc.info['name']))
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    return processes

def is_suspicious_process(process_name):
    """Check if a process name is suspicious."""
    return process_name.lower() in SUSPICIOUS_PROCESS_NAMES

def check_suspicious_processes():
    """Check for suspicious processes running on the system."""
    processes = get_running_processes()
    print(f"Found {len(processes)} running processes.")
    
    suspicious_processes = [(pid, name) for pid, name in processes if is_suspicious_process(name)]
    
    if suspicious_processes:
        print("\nSuspicious processes found:")
        for pid, name in suspicious_processes:
            print(f"PID: {pid}, Name: {name}")
    else:
        print("\nNo suspicious processes found.")

def main():
    """Main function to check a file against malware hashes."""
    file_path = input("Enter the path to the file to check: ").strip()
    
    try:
        # Check if the file is an executable
        if is_executable(file_path):
            print(f"Error: The file '{file_path}' is an executable and cannot be scanned.")
            return
        
        # Load the list of malicious hashes
        malware_hashes = load_malware_hashes(MALWARE_DB_PATH)
        print(f"Loaded {len(malware_hashes)} malicious hashes from the database.")
        
        # Generate the SHA256 hash for the file
        file_hash = generate_file_hash(file_path)
        print(f"SHA256 hash of the file: {file_hash}")
        
        # Check if the file hash is in the malicious hash database
        if is_malicious(file_hash, malware_hashes):
            print(f"The file '{file_path}' is malicious!")
        else:
            print(f"The file '{file_path}' does not match a known malware file.")
        
        # Check for suspicious processes
        print("\nChecking for suspicious processes...")
        check_suspicious_processes()
    
    except FileNotFoundError:
        print("Error: The specified file or malware database was not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
